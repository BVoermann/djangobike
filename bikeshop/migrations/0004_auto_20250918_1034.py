# Generated by Django 4.2.11 on 2025-09-18 10:34

from django.db import migrations


def populate_bike_component_requirements(apps, schema_editor):
    """Populate component requirements for bike types based on specifications"""
    BikeType = apps.get_model('bikeshop', 'BikeType')
    
    # Component requirements for each bike type
    bike_requirements = {
        'Rennrad': {
            'required_wheel_set_names': ['Speed'],
            'required_handlebar_names': ['Sport'],
            'required_frame_names': ['Renn'],
            'required_saddle_names': ['Sport'],
            'required_gearshift_names': ['Gepard'],
            'required_motor_names': [],  # NULL - no motor needed
        },
        'Herrenrad': {
            'required_wheel_set_names': ['Standard'],
            'required_handlebar_names': ['Comfort'],
            'required_frame_names': ['Herren'],
            'required_saddle_names': ['Comfort'],
            'required_gearshift_names': ['Albatross'],
            'required_motor_names': [],  # NULL - no motor needed
        },
        'Damenrad': {
            'required_wheel_set_names': ['Standard'],
            'required_handlebar_names': ['Comfort'],
            'required_frame_names': ['Damen'],
            'required_saddle_names': ['Comfort'],
            'required_gearshift_names': ['Albatross'],
            'required_motor_names': [],  # NULL - no motor needed
        },
        'Mountainbike': {
            'required_wheel_set_names': ['Alpin'],
            'required_handlebar_names': ['Sport'],
            'required_frame_names': ['Mountain'],
            'required_saddle_names': ['Sport'],
            'required_gearshift_names': ['Gepard'],
            'required_motor_names': [],  # NULL - no motor needed
        },
        'E-Mountainbike': {
            'required_wheel_set_names': ['Alpin'],
            'required_handlebar_names': ['Sport'],
            'required_frame_names': ['Mountain'],
            'required_saddle_names': ['Sport'],
            'required_gearshift_names': ['Gepard'],
            'required_motor_names': ['Standard'],
        },
        'E-Bike': {
            'required_wheel_set_names': ['Ampere'],
            'required_handlebar_names': ['Comfort'],
            'required_frame_names': ['Herren'],
            'required_saddle_names': ['Comfort'],
            'required_gearshift_names': ['Albatross'],
            'required_motor_names': ['Standard'],
        },
    }
    
    # Update worker hours based on specifications
    worker_hours = {
        'Rennrad': {'skilled': 0.4, 'unskilled': 1.2},
        'Herrenrad': {'skilled': 0.3, 'unskilled': 1.7},
        'Damenrad': {'skilled': 0.3, 'unskilled': 1.7},
        'Mountainbike': {'skilled': 0.6, 'unskilled': 1.2},
        'E-Mountainbike': {'skilled': 0.9, 'unskilled': 1.4},
        'E-Bike': {'skilled': 0.7, 'unskilled': 1.3},
    }
    
    # Apply to all bike types across all sessions
    for bike_type in BikeType.objects.all():
        if bike_type.name in bike_requirements:
            requirements = bike_requirements[bike_type.name]
            hours = worker_hours[bike_type.name]
            
            # Update component requirements
            bike_type.required_wheel_set_names = requirements['required_wheel_set_names']
            bike_type.required_handlebar_names = requirements['required_handlebar_names']
            bike_type.required_frame_names = requirements['required_frame_names']
            bike_type.required_saddle_names = requirements['required_saddle_names']
            bike_type.required_gearshift_names = requirements['required_gearshift_names']
            bike_type.required_motor_names = requirements['required_motor_names']
            
            # Update worker hours
            bike_type.skilled_worker_hours = hours['skilled']
            bike_type.unskilled_worker_hours = hours['unskilled']
            
            bike_type.save()


def reverse_populate_bike_component_requirements(apps, schema_editor):
    """Reverse migration - clear component requirements"""
    BikeType = apps.get_model('bikeshop', 'BikeType')
    
    for bike_type in BikeType.objects.all():
        bike_type.required_wheel_set_names = []
        bike_type.required_handlebar_names = []
        bike_type.required_frame_names = []
        bike_type.required_saddle_names = []
        bike_type.required_gearshift_names = []
        bike_type.required_motor_names = []
        bike_type.save()


class Migration(migrations.Migration):

    dependencies = [
        ('bikeshop', '0003_biketype_required_frame_names_and_more'),
    ]

    operations = [
        migrations.RunPython(
            populate_bike_component_requirements,
            reverse_populate_bike_component_requirements
        ),
    ]
