# Generated by Django 4.2.11 on 2025-09-23 12:34

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('bikeshop', '0004_auto_20250918_1034'),
    ]

    operations = [
        migrations.CreateModel(
            name='GameMode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('mode_type', models.CharField(choices=[('profit_maximization', 'Gewinnmaximierung'), ('market_dominance', 'Marktdominanz'), ('survival', 'Überleben'), ('growth_focused', 'Wachstumsorientiert'), ('balanced_scorecard', 'Balanced Scorecard'), ('time_challenge', 'Zeitherausforderung'), ('efficiency_master', 'Effizienz-Meister')], max_length=30)),
                ('description', models.TextField()),
                ('duration_months', models.IntegerField(default=24, help_text='Game duration in months')),
                ('starting_balance', models.DecimalField(decimal_places=2, default=80000.0, max_digits=12)),
                ('bankruptcy_threshold', models.DecimalField(decimal_places=2, default=-10000.0, max_digits=12)),
                ('victory_conditions', models.JSONField(default=dict, help_text='JSON configuration for victory conditions')),
                ('difficulty_multipliers', models.JSONField(default=dict, help_text='Multipliers for costs, prices, competition intensity, etc.')),
                ('is_active', models.BooleanField(default=True)),
                ('is_multiplayer_compatible', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SessionGameMode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('is_failed', models.BooleanField(default=False)),
                ('final_score', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('completion_percentage', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('objective_progress', models.JSONField(default=dict, help_text='Progress on each objective')),
                ('monthly_scores', models.JSONField(default=list, help_text='Score history by month')),
                ('game_mode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game_objectives.gamemode')),
                ('session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='game_mode_config', to='bikeshop.gamesession')),
            ],
            options={
                'verbose_name': 'Session Game Mode',
                'verbose_name_plural': 'Session Game Modes',
            },
        ),
        migrations.CreateModel(
            name='GameResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_type', models.CharField(choices=[('victory', 'Sieg'), ('defeat', 'Niederlage'), ('timeout', 'Zeitüberschreitung'), ('bankruptcy', 'Bankrott'), ('elimination', 'Eliminiert')], max_length=20)),
                ('final_score', models.DecimalField(decimal_places=2, max_digits=10)),
                ('completion_percentage', models.DecimalField(decimal_places=2, max_digits=5)),
                ('total_months_played', models.IntegerField()),
                ('final_balance', models.DecimalField(decimal_places=2, max_digits=12)),
                ('total_revenue', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('total_profit', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('bikes_produced', models.IntegerField(default=0)),
                ('bikes_sold', models.IntegerField(default=0)),
                ('market_share_final', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('objective_results', models.JSONField(default=dict, help_text='Results for each objective')),
                ('performance_metrics', models.JSONField(default=dict, help_text='Additional performance metrics')),
                ('summary', models.TextField()),
                ('failure_reason', models.CharField(blank=True, max_length=200)),
                ('recommendations', models.TextField(blank=True)),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('total_players', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session_game_mode', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='result', to='game_objectives.sessiongamemode')),
            ],
            options={
                'ordering': ['-final_score', '-completion_percentage'],
            },
        ),
        migrations.CreateModel(
            name='GameObjective',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('objective_type', models.CharField(choices=[('profit_total', 'Gesamtgewinn erreichen'), ('profit_monthly', 'Monatlicher Gewinn'), ('revenue_total', 'Gesamtumsatz'), ('revenue_monthly', 'Monatlicher Umsatz'), ('market_share', 'Marktanteil'), ('bikes_produced', 'Fahrräder produziert'), ('bikes_sold', 'Fahrräder verkauft'), ('quality_rating', 'Qualitätsbewertung'), ('efficiency_score', 'Effizienz-Score'), ('customer_satisfaction', 'Kundenzufriedenheit'), ('balance_minimum', 'Mindest-Kontostand'), ('inventory_turnover', 'Lagerumschlag'), ('cost_per_unit', 'Kosten pro Einheit'), ('sustainability_score', 'Nachhaltigkeits-Score')], max_length=30)),
                ('target_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('comparison_operator', models.CharField(choices=[('gte', 'Größer oder gleich'), ('lte', 'Kleiner oder gleich'), ('eq', 'Gleich'), ('gt', 'Größer als'), ('lt', 'Kleiner als')], default='gte', max_length=5)),
                ('weight', models.DecimalField(decimal_places=2, default=1.0, help_text='Weight for scoring', max_digits=5)),
                ('is_primary', models.BooleanField(default=False, help_text='Primary objectives must be met for victory')),
                ('is_failure_condition', models.BooleanField(default=False, help_text='Failing this causes immediate game over')),
                ('evaluation_frequency', models.CharField(choices=[('monthly', 'Monatlich'), ('quarterly', 'Quartalsweise'), ('end_game', 'Spielende'), ('continuous', 'Kontinuierlich')], default='end_game', max_length=20)),
                ('order', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('game_mode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='objectives', to='game_objectives.gamemode')),
            ],
            options={
                'ordering': ['game_mode', 'order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='BankruptcyEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balance_at_bankruptcy', models.DecimalField(decimal_places=2, max_digits=12)),
                ('bankruptcy_threshold', models.DecimalField(decimal_places=2, max_digits=12)),
                ('trigger_month', models.IntegerField()),
                ('trigger_year', models.IntegerField()),
                ('primary_cause', models.CharField(choices=[('excessive_spending', 'Übermäßige Ausgaben'), ('low_sales', 'Niedrige Verkäufe'), ('high_costs', 'Hohe Kosten'), ('market_downturn', 'Marktabschwung'), ('poor_planning', 'Schlechte Planung'), ('external_event', 'Externes Ereignis'), ('competition', 'Konkurrenz')], max_length=50)),
                ('contributing_factors', models.JSONField(default=list, help_text='List of contributing factors')),
                ('recovery_attempted', models.BooleanField(default=False)),
                ('recovery_successful', models.BooleanField(default=False)),
                ('bailout_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('player_eliminated', models.BooleanField(default=True)),
                ('elimination_reason', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bankruptcy_events', to='bikeshop.gamesession')),
                ('session_game_mode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='game_objectives.sessiongamemode')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
