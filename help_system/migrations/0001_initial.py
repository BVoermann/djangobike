# Generated by Django 4.2.11 on 2025-09-23 12:09

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('bikeshop', '0004_auto_20250918_1034'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GuideProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('current_step', models.IntegerField(default=0)),
                ('total_steps', models.IntegerField(default=0)),
                ('steps_completed', models.JSONField(default=list)),
                ('time_spent_seconds', models.IntegerField(default=0)),
                ('was_skipped', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='HelpCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('category_type', models.CharField(choices=[('basics', 'Grundlagen'), ('procurement', 'Einkauf'), ('production', 'Produktion'), ('sales', 'Verkauf'), ('finance', 'Finanzen'), ('warehouse', 'Lager'), ('strategy', 'Strategie'), ('reports', 'Berichte'), ('advanced', 'Erweitert')], max_length=20)),
                ('description', models.TextField()),
                ('icon', models.CharField(default='fas fa-question-circle', max_length=50)),
                ('order', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='InteractiveGuide',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('guide_type', models.CharField(choices=[('walkthrough', 'Feature Walkthrough'), ('onboarding', 'Initial Onboarding'), ('feature_intro', 'New Feature Introduction'), ('troubleshooting', 'Problem Solving')], max_length=20)),
                ('target_url_pattern', models.CharField(help_text="URL pattern where this guide should be available (e.g., '/procurement/*')", max_length=200)),
                ('trigger_condition', models.CharField(choices=[('manual', 'Manual Activation'), ('first_visit', 'First Visit to Page'), ('session_start', 'New Session'), ('feature_access', 'First Feature Access'), ('error_state', 'Error Occurred')], default='manual', max_length=20)),
                ('steps', models.JSONField(default=list, help_text='List of guide steps with targets and content')),
                ('prerequisites', models.TextField(blank=True)),
                ('user_level_required', models.CharField(choices=[('beginner', 'Anfänger'), ('intermediate', 'Fortgeschritten'), ('advanced', 'Experte')], default='beginner', max_length=20)),
                ('is_skippable', models.BooleanField(default=True)),
                ('show_progress', models.BooleanField(default=True)),
                ('auto_advance', models.BooleanField(default=False)),
                ('completion_required', models.BooleanField(default=False)),
                ('order', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('start_count', models.IntegerField(default=0)),
                ('completion_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='guides', to='help_system.helpcategory')),
            ],
            options={
                'ordering': ['category', 'order', 'title'],
            },
        ),
        migrations.CreateModel(
            name='TutorialVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('video_url', models.URLField(help_text='YouTube, Vimeo, or direct video URL')),
                ('video_embed_code', models.TextField(blank=True, help_text='HTML embed code for video')),
                ('thumbnail_url', models.URLField(blank=True)),
                ('duration_minutes', models.IntegerField(help_text='Duration in minutes')),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Anfänger'), ('intermediate', 'Fortgeschritten'), ('advanced', 'Experte')], default='beginner', max_length=20)),
                ('prerequisites', models.TextField(blank=True, help_text='What users should know before watching')),
                ('learning_objectives', models.TextField(help_text='What users will learn')),
                ('order', models.IntegerField(default=0)),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags', max_length=500)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('view_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='help_system.helpcategory')),
            ],
            options={
                'ordering': ['category', 'order', 'title'],
            },
        ),
        migrations.CreateModel(
            name='UserHelpProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('onboarding_completed', models.BooleanField(default=False)),
                ('help_level', models.CharField(choices=[('beginner', 'Anfänger'), ('intermediate', 'Fortgeschritten'), ('advanced', 'Experte')], default='beginner', max_length=20)),
                ('show_tooltips', models.BooleanField(default=True)),
                ('show_contextual_help', models.BooleanField(default=True)),
                ('auto_play_guides', models.BooleanField(default=False)),
                ('total_help_interactions', models.IntegerField(default=0)),
                ('last_help_accessed', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('guides_completed', models.ManyToManyField(blank=True, related_name='completed_by', to='help_system.interactiveguide')),
                ('guides_started', models.ManyToManyField(related_name='started_by', through='help_system.GuideProgress', to='help_system.interactiveguide')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bikeshop.gamesession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='help_progress', to=settings.AUTH_USER_MODEL)),
                ('videos_watched', models.ManyToManyField(blank=True, related_name='watched_by', to='help_system.tutorialvideo')),
            ],
            options={
                'unique_together': {('user', 'session')},
            },
        ),
        migrations.CreateModel(
            name='TooltipHelp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('element_selector', models.CharField(help_text="CSS selector for the target element (e.g., '#balance-display', '.btn-primary')", max_length=200)),
                ('page_url_pattern', models.CharField(help_text='URL pattern where this tooltip should appear', max_length=200)),
                ('title', models.CharField(max_length=100)),
                ('content', models.TextField()),
                ('tooltip_type', models.CharField(choices=[('info', 'Information'), ('tip', 'Pro Tip'), ('warning', 'Warning'), ('definition', 'Definition')], default='info', max_length=20)),
                ('position', models.CharField(choices=[('top', 'Top'), ('bottom', 'Bottom'), ('left', 'Left'), ('right', 'Right')], default='top', max_length=20)),
                ('icon', models.CharField(default='fas fa-question-circle', max_length=50)),
                ('show_on_hover', models.BooleanField(default=True)),
                ('show_on_click', models.BooleanField(default=False)),
                ('auto_hide_delay', models.IntegerField(default=0, help_text='Auto-hide after X seconds (0 = no auto-hide)')),
                ('order', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('view_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tooltips', to='help_system.helpcategory')),
            ],
            options={
                'ordering': ['category', 'order', 'title'],
            },
        ),
        migrations.CreateModel(
            name='HelpFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('video', 'Tutorial Video'), ('guide', 'Interactive Guide'), ('tooltip', 'Tooltip'), ('contextual', 'Contextual Help')], max_length=20)),
                ('content_id', models.IntegerField(help_text='ID of the help content')),
                ('rating', models.IntegerField(choices=[(1, '⭐ Nicht hilfreich'), (2, '⭐⭐ Wenig hilfreich'), (3, '⭐⭐⭐ Okay'), (4, '⭐⭐⭐⭐ Hilfreich'), (5, '⭐⭐⭐⭐⭐ Sehr hilfreich')])),
                ('comment', models.TextField(blank=True)),
                ('suggested_improvements', models.TextField(blank=True)),
                ('would_recommend', models.BooleanField(default=True)),
                ('user_experience_level', models.CharField(choices=[('beginner', 'Anfänger'), ('intermediate', 'Fortgeschritten'), ('advanced', 'Experte')], default='beginner', max_length=20)),
                ('session_context', models.CharField(blank=True, max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='help_feedback', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HelpAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('video_started', 'Video Started'), ('video_completed', 'Video Completed'), ('guide_started', 'Guide Started'), ('guide_completed', 'Guide Completed'), ('guide_skipped', 'Guide Skipped'), ('tooltip_viewed', 'Tooltip Viewed'), ('help_searched', 'Help Searched'), ('contextual_help_shown', 'Contextual Help Shown'), ('contextual_help_dismissed', 'Contextual Help Dismissed')], max_length=30)),
                ('content_type', models.CharField(choices=[('video', 'Tutorial Video'), ('guide', 'Interactive Guide'), ('tooltip', 'Tooltip'), ('contextual', 'Contextual Help')], max_length=20)),
                ('content_id', models.IntegerField()),
                ('page_url', models.CharField(max_length=300)),
                ('session_month', models.IntegerField(blank=True, null=True)),
                ('user_experience_level', models.CharField(choices=[('beginner', 'Anfänger'), ('intermediate', 'Fortgeschritten'), ('advanced', 'Experte')], default='beginner', max_length=20)),
                ('interaction_data', models.JSONField(default=dict, help_text='Additional data about the interaction')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bikeshop.gamesession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='help_analytics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddField(
            model_name='guideprogress',
            name='guide',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='help_system.interactiveguide'),
        ),
        migrations.AddField(
            model_name='guideprogress',
            name='user_progress',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='help_system.userhelpprogress'),
        ),
        migrations.CreateModel(
            name='ContextualHelp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('context_type', models.CharField(choices=[('page_load', 'Page Loaded'), ('action_taken', 'Action Performed'), ('error_occurred', 'Error State'), ('milestone_reached', 'Milestone Achieved'), ('time_spent', 'Time on Page'), ('struggle_detected', 'User Struggling')], max_length=20)),
                ('trigger_conditions', models.JSONField(default=dict, help_text="Conditions that trigger this help (e.g., {'page': '/procurement/', 'first_time': true})")),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('help_format', models.CharField(choices=[('popup', 'Popup Modal'), ('sidebar', 'Sidebar Panel'), ('banner', 'Top Banner'), ('tooltip', 'Tooltip'), ('guide', 'Interactive Guide')], default='popup', max_length=20)),
                ('user_experience_level', models.CharField(choices=[('beginner', 'Anfänger'), ('intermediate', 'Fortgeschritten'), ('advanced', 'Experte')], default='beginner', max_length=20)),
                ('session_month_range', models.CharField(blank=True, help_text="e.g., '1-3' for first 3 months", max_length=50)),
                ('max_displays_per_user', models.IntegerField(default=3)),
                ('cooldown_hours', models.IntegerField(default=24, help_text='Hours before showing again')),
                ('priority', models.IntegerField(default=5, help_text='1=highest, 10=lowest')),
                ('order', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('trigger_count', models.IntegerField(default=0)),
                ('interaction_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contextual_help', to='help_system.helpcategory')),
                ('related_guide', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='help_system.interactiveguide')),
                ('related_video', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='help_system.tutorialvideo')),
            ],
            options={
                'ordering': ['priority', 'order', 'title'],
            },
        ),
    ]
