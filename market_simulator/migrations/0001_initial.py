# Generated by Django 4.2.11 on 2025-09-22 11:41

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('bikeshop', '0004_auto_20250918_1034'),
        ('multiplayer', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='MarketConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('market_structure', models.CharField(choices=[('perfect', 'Perfect Competition'), ('monopolistic', 'Monopolistic Competition'), ('oligopoly', 'Oligopoly'), ('duopoly', 'Duopoly')], default='monopolistic', max_length=20)),
                ('total_market_size', models.IntegerField(default=5000000, help_text='Total annual bicycle market size in units', validators=[django.core.validators.MinValueValidator(100000), django.core.validators.MaxValueValidator(50000000)])),
                ('market_concentration_ratio', models.FloatField(default=0.4, help_text='Market concentration ratio (top 4 firms)', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(0.9)])),
                ('price_competition_intensity', models.FloatField(default=1.0, help_text='Intensity of price competition', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(2.0)])),
                ('quality_competition_intensity', models.FloatField(default=1.0, help_text='Intensity of quality competition', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(2.0)])),
                ('innovation_competition_intensity', models.FloatField(default=1.0, help_text='Intensity of innovation competition', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(2.0)])),
                ('entry_barriers', models.FloatField(default=1.0, help_text='Height of entry barriers', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(3.0)])),
                ('exit_barriers', models.FloatField(default=1.0, help_text='Height of exit barriers', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(3.0)])),
                ('price_transparency', models.FloatField(default=0.8, help_text='Level of price transparency in market', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(1.0)])),
                ('information_asymmetry', models.FloatField(default=0.2, help_text='Level of information asymmetry', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(0.8)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('multiplayer_game', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='market_config', to='multiplayer.multiplayergame')),
            ],
        ),
        migrations.CreateModel(
            name='CustomerDemographics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.IntegerField()),
                ('year', models.IntegerField()),
                ('low_income_percentage', models.FloatField(default=20.0, validators=[django.core.validators.MinValueValidator(10.0), django.core.validators.MaxValueValidator(40.0)])),
                ('lower_middle_percentage', models.FloatField(default=25.0, validators=[django.core.validators.MinValueValidator(15.0), django.core.validators.MaxValueValidator(35.0)])),
                ('middle_percentage', models.FloatField(default=30.0, validators=[django.core.validators.MinValueValidator(20.0), django.core.validators.MaxValueValidator(40.0)])),
                ('upper_middle_percentage', models.FloatField(default=20.0, validators=[django.core.validators.MinValueValidator(10.0), django.core.validators.MaxValueValidator(30.0)])),
                ('high_income_percentage', models.FloatField(default=5.0, validators=[django.core.validators.MinValueValidator(2.0), django.core.validators.MaxValueValidator(15.0)])),
                ('children_percentage', models.FloatField(default=10.0)),
                ('teenagers_percentage', models.FloatField(default=8.0)),
                ('young_adults_percentage', models.FloatField(default=25.0)),
                ('adults_percentage', models.FloatField(default=35.0)),
                ('middle_aged_percentage', models.FloatField(default=15.0)),
                ('seniors_percentage', models.FloatField(default=7.0)),
                ('commuters_percentage', models.FloatField(default=20.0)),
                ('recreational_percentage', models.FloatField(default=30.0)),
                ('sports_percentage', models.FloatField(default=15.0)),
                ('families_percentage', models.FloatField(default=20.0)),
                ('eco_conscious_percentage', models.FloatField(default=10.0)),
                ('luxury_percentage', models.FloatField(default=3.0)),
                ('budget_percentage', models.FloatField(default=2.0)),
                ('total_potential_customers', models.IntegerField(default=1000000, help_text='Total potential bicycle customers in the market', validators=[django.core.validators.MinValueValidator(100000), django.core.validators.MaxValueValidator(10000000)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('multiplayer_game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customer_demographics', to='multiplayer.multiplayergame')),
            ],
            options={
                'ordering': ['-year', '-month'],
                'unique_together': {('multiplayer_game', 'month', 'year')},
            },
        ),
        migrations.CreateModel(
            name='PriceDemandFunction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_segment', models.CharField(choices=[('commuters', 'Urban Commuters'), ('recreational', 'Recreational Riders'), ('sports', 'Sports Enthusiasts'), ('families', 'Families with Children'), ('eco_conscious', 'Environmentally Conscious'), ('luxury', 'Luxury/Premium Buyers'), ('budget', 'Budget-Conscious Buyers')], max_length=20)),
                ('demand_intercept', models.FloatField(default=1000.0, help_text='Base demand level (a parameter)')),
                ('price_coefficient', models.FloatField(default=-0.5, help_text='Price sensitivity coefficient (b parameter)')),
                ('income_coefficient', models.FloatField(default=0.3, help_text='Income effect coefficient (c parameter)')),
                ('substitute_coefficient', models.FloatField(default=-0.2, help_text='Substitute goods effect (d parameter)')),
                ('trend_coefficient', models.FloatField(default=0.1, help_text='Market trend effect (e parameter)')),
                ('price_elasticity', models.FloatField(default=-1.5, help_text='Price elasticity of demand', validators=[django.core.validators.MinValueValidator(-5.0), django.core.validators.MaxValueValidator(-0.1)])),
                ('saturation_point', models.IntegerField(default=10000, help_text='Market saturation point for this segment')),
                ('quality_sensitivity', models.FloatField(default=0.2, help_text='Sensitivity to quality improvements', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('innovation_sensitivity', models.FloatField(default=0.15, help_text='Sensitivity to innovation', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('brand_loyalty', models.FloatField(default=0.1, help_text='Brand loyalty factor', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(0.5)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bike_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bikeshop.biketype')),
                ('market_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='price_demand_functions', to='market_simulator.marketconfiguration')),
            ],
            options={
                'unique_together': {('market_config', 'bike_type', 'customer_segment')},
            },
        ),
        migrations.CreateModel(
            name='PlayerMarketSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.IntegerField()),
                ('year', models.IntegerField()),
                ('quantity_offered', models.IntegerField(help_text='Number of bicycles offered for sale', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)])),
                ('price_per_unit', models.DecimalField(decimal_places=2, help_text='Price per bicycle', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('1.00'))])),
                ('quality_rating', models.FloatField(default=5.0, help_text='Quality rating (1-10 scale)', validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(10.0)])),
                ('innovation_level', models.FloatField(default=5.0, help_text='Innovation level (1-10 scale)', validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(10.0)])),
                ('brand_strength', models.FloatField(default=5.0, help_text='Brand strength (1-10 scale)', validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(10.0)])),
                ('marketing_spend', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Marketing spend for this submission', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('target_segments', models.JSONField(default=list, help_text='Target customer segments for this submission')),
                ('units_sold', models.IntegerField(default=0)),
                ('market_share_percentage', models.FloatField(default=0.0)),
                ('revenue_generated', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('demand_elasticity_applied', models.FloatField(default=0.0)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('processed', models.BooleanField(default=False)),
                ('bike_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bikeshop.biketype')),
                ('multiplayer_game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='market_submissions', to='multiplayer.multiplayergame')),
                ('player_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='market_submissions', to='multiplayer.playersession')),
            ],
            options={
                'ordering': ['-year', '-month', 'player_session'],
                'unique_together': {('multiplayer_game', 'player_session', 'month', 'year', 'bike_type')},
            },
        ),
        migrations.CreateModel(
            name='MarketFactors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.IntegerField()),
                ('year', models.IntegerField()),
                ('retro_trend_strength', models.FloatField(default=1.0, help_text='Strength of retro/vintage bicycle trends', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(2.0)])),
                ('electric_bike_trend', models.FloatField(default=1.0, help_text='Strength of electric bike adoption trend', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(3.0)])),
                ('health_fitness_trend', models.FloatField(default=1.0, help_text='Health and fitness consciousness trend', validators=[django.core.validators.MinValueValidator(0.7), django.core.validators.MaxValueValidator(2.0)])),
                ('environmental_consciousness', models.FloatField(default=1.0, help_text='Environmental consciousness level', validators=[django.core.validators.MinValueValidator(0.8), django.core.validators.MaxValueValidator(1.8)])),
                ('gas_price_index', models.FloatField(default=100.0, help_text='Gas price index (100 = baseline)', validators=[django.core.validators.MinValueValidator(50.0), django.core.validators.MaxValueValidator(200.0)])),
                ('carbon_tax_level', models.FloatField(default=0.0, help_text='Carbon tax per ton CO2', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(50.0)])),
                ('weather_favorability', models.FloatField(default=1.0, help_text='Weather favorability for cycling', validators=[django.core.validators.MinValueValidator(0.3), django.core.validators.MaxValueValidator(1.5)])),
                ('seasonal_factor', models.FloatField(default=1.0, help_text='Seasonal demand factor', validators=[django.core.validators.MinValueValidator(0.4), django.core.validators.MaxValueValidator(1.6)])),
                ('cycling_infrastructure_index', models.FloatField(default=100.0, help_text='Cycling infrastructure quality index', validators=[django.core.validators.MinValueValidator(80.0), django.core.validators.MaxValueValidator(150.0)])),
                ('government_bike_incentives', models.FloatField(default=0.0, help_text='Government incentives per bicycle purchase', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1000.0)])),
                ('smart_bike_adoption', models.FloatField(default=1.0, help_text='Smart bike technology adoption rate', validators=[django.core.validators.MinValueValidator(0.8), django.core.validators.MaxValueValidator(2.5)])),
                ('bike_sharing_competition', models.FloatField(default=1.0, help_text='Competition from bike sharing services', validators=[django.core.validators.MinValueValidator(0.7), django.core.validators.MaxValueValidator(1.3)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('multiplayer_game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='market_factors', to='multiplayer.multiplayergame')),
            ],
            options={
                'ordering': ['-year', '-month'],
                'unique_together': {('multiplayer_game', 'month', 'year')},
            },
        ),
        migrations.CreateModel(
            name='MarketClearingResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.IntegerField()),
                ('year', models.IntegerField()),
                ('total_quantity_supplied', models.IntegerField(default=0)),
                ('total_quantity_demanded', models.IntegerField(default=0)),
                ('total_quantity_sold', models.IntegerField(default=0)),
                ('market_clearing_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('average_price_offered', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('price_dispersion', models.FloatField(default=0.0, help_text='Coefficient of variation in prices')),
                ('excess_supply', models.IntegerField(default=0)),
                ('excess_demand', models.IntegerField(default=0)),
                ('market_efficiency', models.FloatField(default=1.0, help_text='Market efficiency score (0-1)')),
                ('herfindahl_index', models.FloatField(default=0.0, help_text='Market concentration measure')),
                ('number_of_competitors', models.IntegerField(default=0)),
                ('economic_multiplier', models.FloatField(default=1.0)),
                ('market_factors_multiplier', models.FloatField(default=1.0)),
                ('seasonal_adjustment', models.FloatField(default=1.0)),
                ('processed_at', models.DateTimeField(auto_now_add=True)),
                ('bike_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bikeshop.biketype')),
                ('multiplayer_game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='market_results', to='multiplayer.multiplayergame')),
            ],
            options={
                'ordering': ['-year', '-month'],
                'unique_together': {('multiplayer_game', 'month', 'year', 'bike_type')},
            },
        ),
        migrations.CreateModel(
            name='EconomicCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.IntegerField()),
                ('year', models.IntegerField()),
                ('gdp_growth_rate', models.FloatField(default=2.5, help_text='Annual GDP growth rate percentage', validators=[django.core.validators.MinValueValidator(-10.0), django.core.validators.MaxValueValidator(15.0)])),
                ('inflation_rate', models.FloatField(default=2.0, help_text='Annual inflation rate percentage', validators=[django.core.validators.MinValueValidator(-5.0), django.core.validators.MaxValueValidator(20.0)])),
                ('unemployment_rate', models.FloatField(default=5.0, help_text='Unemployment rate percentage', validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(25.0)])),
                ('interest_rate', models.FloatField(default=3.5, help_text='Central bank interest rate percentage', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(15.0)])),
                ('business_cycle_phase', models.CharField(choices=[('expansion', 'Expansion'), ('peak', 'Peak'), ('contraction', 'Contraction'), ('trough', 'Trough')], default='expansion', max_length=20)),
                ('cycle_duration_months', models.IntegerField(default=0)),
                ('cycle_intensity', models.FloatField(default=1.0, help_text='Intensity multiplier for business cycle effects', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(3.0)])),
                ('consumer_confidence_index', models.FloatField(default=100.0, help_text='Consumer confidence index (100 = neutral)', validators=[django.core.validators.MinValueValidator(50.0), django.core.validators.MaxValueValidator(150.0)])),
                ('disposable_income_index', models.FloatField(default=100.0, help_text='Disposable income index (100 = baseline)', validators=[django.core.validators.MinValueValidator(70.0), django.core.validators.MaxValueValidator(130.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('multiplayer_game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='economic_conditions', to='multiplayer.multiplayergame')),
            ],
            options={
                'ordering': ['-year', '-month'],
                'unique_together': {('multiplayer_game', 'month', 'year')},
            },
        ),
        migrations.CreateModel(
            name='BikeMarketSegment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('low_income_price_sensitivity', models.FloatField(default=0.8)),
                ('lower_middle_price_sensitivity', models.FloatField(default=0.7)),
                ('middle_price_sensitivity', models.FloatField(default=0.5)),
                ('upper_middle_price_sensitivity', models.FloatField(default=0.3)),
                ('high_income_price_sensitivity', models.FloatField(default=0.1)),
                ('children_preference', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('teenagers_preference', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('young_adults_preference', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('adults_preference', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('middle_aged_preference', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('seniors_preference', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('commuters_preference', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('recreational_preference', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('sports_preference', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('families_preference', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('eco_conscious_preference', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('luxury_preference', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('budget_preference', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('base_monthly_demand', models.IntegerField(default=1000, validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(100000)])),
                ('price_elasticity', models.FloatField(default=-1.5, help_text='Price elasticity of demand (negative value)', validators=[django.core.validators.MinValueValidator(-5.0), django.core.validators.MaxValueValidator(-0.1)])),
                ('bike_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bikeshop.biketype')),
                ('customer_demographics', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bike_segments', to='market_simulator.customerdemographics')),
            ],
            options={
                'unique_together': {('customer_demographics', 'bike_type')},
            },
        ),
    ]
