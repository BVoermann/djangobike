# Generated by Django 4.2.11 on 2025-09-23 07:16

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('bikeshop', '0004_auto_20250918_1034'),
        ('business_strategy', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='EventCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('category_type', models.CharField(choices=[('innovation', 'Product Innovation'), ('market', 'Market Changes'), ('competition', 'Competition'), ('promotion', 'Promotional Opportunities'), ('supply_chain', 'Supply Chain Disruptions'), ('regulatory', 'Regulatory Changes'), ('economic', 'Economic Events'), ('environmental', 'Environmental Events'), ('technology', 'Technology Breakthroughs'), ('crisis', 'Crisis Events')], max_length=20)),
                ('description', models.TextField()),
                ('base_probability', models.FloatField(default=5.0, help_text='Base probability percentage for this category per month', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Event Categories',
            },
        ),
        migrations.CreateModel(
            name='EventOccurrence',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('triggered_month', models.IntegerField()),
                ('triggered_year', models.IntegerField()),
                ('expires_month', models.IntegerField(blank=True, null=True)),
                ('expires_year', models.IntegerField(blank=True, null=True)),
                ('player_response', models.JSONField(default=dict, help_text='How the player chose to respond to this event')),
                ('is_acknowledged', models.BooleanField(default=False)),
                ('applied_effects', models.JSONField(default=dict, help_text='Track which effects have been applied')),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-triggered_year', '-triggered_month'],
            },
        ),
        migrations.CreateModel(
            name='RegulationTimeline',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('regulation_type', models.CharField(choices=[('component_ban', 'Component Ban'), ('technology_restriction', 'Technology Restriction'), ('certification_requirement', 'New Certification Requirement'), ('environmental_standard', 'Environmental Standard'), ('safety_regulation', 'Safety Regulation'), ('trade_restriction', 'Trade Restriction'), ('subsidy_program', 'Government Subsidy Program'), ('tax_change', 'Tax Policy Change')], max_length=30)),
                ('announcement_month', models.IntegerField(help_text='Game month when regulation is announced')),
                ('announcement_year', models.IntegerField(help_text='Game year when regulation is announced')),
                ('implementation_month', models.IntegerField(help_text='Game month when regulation takes effect')),
                ('implementation_year', models.IntegerField(help_text='Game year when regulation takes effect')),
                ('expiration_month', models.IntegerField(blank=True, help_text='Game month when regulation expires (if applicable)', null=True)),
                ('expiration_year', models.IntegerField(blank=True, help_text='Game year when regulation expires (if applicable)', null=True)),
                ('restrictions', models.JSONField(default=dict, help_text='Specific restrictions: banned_items, required_certifications, etc.')),
                ('compliance_requirements', models.JSONField(default=dict, help_text='What companies need to do to comply')),
                ('penalties', models.JSONField(default=dict, help_text='Penalties for non-compliance')),
                ('benefits', models.JSONField(default=dict, help_text='Benefits for compliance (subsidies, tax breaks, etc.)')),
                ('is_global', models.BooleanField(default=True, help_text='Whether this regulation affects all sessions')),
                ('status', models.CharField(choices=[('announced', 'Announced'), ('grace_period', 'Grace Period'), ('active', 'Active'), ('expired', 'Expired')], default='announced', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('affected_bike_types', models.ManyToManyField(blank=True, to='bikeshop.biketype')),
                ('affected_components', models.ManyToManyField(blank=True, to='bikeshop.component')),
                ('affected_suppliers', models.ManyToManyField(blank=True, to='bikeshop.supplier')),
            ],
            options={
                'ordering': ['announcement_year', 'announcement_month'],
            },
        ),
        migrations.CreateModel(
            name='RandomEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('detailed_description', models.TextField(blank=True)),
                ('severity', models.CharField(choices=[('minor', 'Minor'), ('moderate', 'Moderate'), ('major', 'Major'), ('critical', 'Critical')], default='moderate', max_length=20)),
                ('duration_type', models.CharField(choices=[('instant', 'Instant Effect'), ('temporary', 'Temporary (1-3 months)'), ('medium_term', 'Medium Term (3-6 months)'), ('permanent', 'Permanent')], default='temporary', max_length=20)),
                ('probability_weight', models.FloatField(default=1.0, help_text='Multiplier for category base probability', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(10.0)])),
                ('min_game_month', models.IntegerField(default=1, help_text='Minimum game month before this event can trigger')),
                ('max_game_month', models.IntegerField(blank=True, help_text="Maximum game month after which this event won't trigger", null=True)),
                ('requires_session_balance_min', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum session balance required for this event', max_digits=12, null=True)),
                ('requires_session_balance_max', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum session balance for this event (for crisis events)', max_digits=12, null=True)),
                ('financial_effects', models.JSONField(default=dict, help_text='Financial impacts: income, expenses, one_time_cost, etc.')),
                ('production_effects', models.JSONField(default=dict, help_text='Production impacts: efficiency, cost_modifier, quality_bonus, etc.')),
                ('market_effects', models.JSONField(default=dict, help_text='Market impacts: demand_modifier, new_segments, price_changes, etc.')),
                ('regulatory_effects', models.JSONField(default=dict, help_text='Regulatory impacts: banned_components, required_certifications, etc.')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='random_events.eventcategory')),
                ('mutually_exclusive_with', models.ManyToManyField(blank=True, help_text='Events that cannot occur in the same month', to='random_events.randomevent')),
            ],
        ),
        migrations.CreateModel(
            name='MarketOpportunity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('opportunity_type', models.CharField(choices=[('new_segment', 'New Market Segment'), ('export_market', 'Export Market Opening'), ('government_contract', 'Government Contract'), ('bulk_order', 'Large Bulk Order'), ('partnership', 'Strategic Partnership'), ('technology_license', 'Technology Licensing')], max_length=20)),
                ('available_from_month', models.IntegerField()),
                ('available_from_year', models.IntegerField()),
                ('expires_month', models.IntegerField()),
                ('expires_year', models.IntegerField()),
                ('required_investment', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('required_capabilities', models.JSONField(default=list, help_text='Required capabilities (certifications, research, etc.)')),
                ('potential_revenue', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('market_effects', models.JSONField(default=dict, help_text='Long-term market effects if opportunity is taken')),
                ('is_accepted', models.BooleanField(default=False)),
                ('is_completed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('required_bike_types', models.ManyToManyField(blank=True, to='bikeshop.biketype')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bikeshop.gamesession')),
                ('triggering_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='random_events.eventoccurrence')),
            ],
        ),
        migrations.AddField(
            model_name='eventoccurrence',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='random_events.randomevent'),
        ),
        migrations.AddField(
            model_name='eventoccurrence',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bikeshop.gamesession'),
        ),
        migrations.CreateModel(
            name='EventChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice_text', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True)),
                ('financial_effects', models.JSONField(default=dict)),
                ('production_effects', models.JSONField(default=dict)),
                ('market_effects', models.JSONField(default=dict)),
                ('regulatory_effects', models.JSONField(default=dict)),
                ('required_balance', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum balance required to choose this option', max_digits=12, null=True)),
                ('is_default', models.BooleanField(default=False, help_text="Whether this is the default choice if player doesn't respond")),
                ('order', models.IntegerField(default=0, help_text='Display order')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='choices', to='random_events.randomevent')),
                ('required_research', models.ManyToManyField(blank=True, help_text='Research projects required to unlock this choice', to='business_strategy.researchproject')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='RegulationCompliance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compliance_level', models.CharField(choices=[('non_compliant', 'Non-Compliant'), ('partial', 'Partially Compliant'), ('compliant', 'Compliant'), ('exemplary', 'Exemplary Compliance')], default='non_compliant', max_length=20)),
                ('compliance_score', models.FloatField(default=0.0, help_text='Percentage compliance score', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('actions_taken', models.JSONField(default=list, help_text='List of compliance actions the session has taken')),
                ('compliance_costs', models.DecimalField(decimal_places=2, default=0, help_text='Total cost spent on compliance', max_digits=12)),
                ('penalties_paid', models.DecimalField(decimal_places=2, default=0, help_text='Total penalties paid for non-compliance', max_digits=12)),
                ('benefits_received', models.DecimalField(decimal_places=2, default=0, help_text='Total benefits received for compliance', max_digits=12)),
                ('last_assessment_month', models.IntegerField()),
                ('last_assessment_year', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('regulation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='random_events.regulationtimeline')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bikeshop.gamesession')),
            ],
            options={
                'unique_together': {('session', 'regulation')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='eventoccurrence',
            unique_together={('session', 'event', 'triggered_month', 'triggered_year')},
        ),
    ]
